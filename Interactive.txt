The underlying structure for an interactive programming environment.

Values ("any" below) sit visually on the screen.
The user drags values onto a function, and the resulting value appears.
Environment records initial state ("context" below) & actions by user ("ops" below).
User can then "Box" everything they have done into a function.

The end goal is to do this visually, but may have to start programmatically first.

--------------------------

any   :: object | array | prim
prim  :: string | number | bool | null
key   :: string

value :: prim             <-- Actual prim value
         { key:value.. }  <-- Object literal of values
         [ [ value.. ] ]  <-- Array literal of values
         entry            <-- Reference path to a value

entry :: [ number, index.. ]  <-- Distance up the context-chain, indexes down into it

index :: number  <-- Array index
         string  <-- Object property

func  :: { args:[string..], ops:[op..], parent:context }  <-- Function

op    :: [ entry.. ]   <-- Operation to perform, followed by args

context :: { values:[any..], parent:context }  <-- Execution context

-----------------------

EXAMPLE: [x, y, z] --> { x: x*(d/(d+z)), y: y*(d/(d+z)) }

Func: {
  parent: { values: [<*>, </>, <+>, <D>] },  <-- Entries: [1,..]
  args  : ["x","y","z"],
  ops   : [
    [[1,2],[1,3],[0,2]],   --> [0,3]
    [[1,1],[1,3],[1,3]],   --> [0,4]
    [[1,0],[0,0],[0,4]],   --> [0,5]
    [[1,0],[0,1],[0,4]],   --> [0,6]
    [{x:[0,5], y:[0,6]}]   --> [0,7]
  ]
}

Context: [  <-- Entries: [0,..]
  0: x      <-- These come straight from args passed
  1: y
  2: z
  3: d + z  <-- Everything from here down is built from ops over time
  4: d /..
  5: x *..
  6: y *..
  7: {x,y}
]