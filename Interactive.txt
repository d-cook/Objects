The underlying structure for an interactive programming environment.

Values ("any" below) sit visually on the screen.
The user drags values onto a function, and the resulting value appears.
Environment records initial state ("context" below) & actions by user ("ops" below).
User can then "Box" everything they have done into a function.

The end goal is to do this visually, but may have to start programmatically first.

--------------------------

any   :: object | array | prim | native-function   <-- object can be a func
prim  :: string | number | bool | null
key   :: string

value :: prim              <-- Actual prim value
         { key:value.. }   <-- Object literal of values
         [ [ value.. ] ]   <-- Array literal of values
         calc              <-- Calculated value

calc   :: [ lookup.. ]     <-- Op followed by args, Or a single lookup value
lookup :: number, entry    <-- Distance up the context-chain (-1 for args), entry
entry  :: [ index.. ]      <-- Indexes down into a context.
index  :: number | string  <-- Array index or Object property

func  :: { args:[string..], values:[value..], parent:context }

context :: { values:[any..], parent:context }  <-- Execution context

-----------------------

EXAMPLE: (x, y, z) --> { x: x*(d/(d+z)), y: y*(d/(d+z)) }

Func: {
  parent: { values: [<*>, </>, <+>] },  <-- Lookups:  1,[..]
  args  : ["x","y","z","d"],            <-- Lookups: -1,[..]
  values: [                             <-- Lookups:  0,[..]
    [ 1,[2], -1,[3], -1,[2]],  <-- d + z
    [ 1,[1], -1,[3],  0,[0]],  <-- d / (d+z)
    [ 1,[0], -1,[0],  0,[1]],  <-- x * (d/(d+z))
    [ 1,[0], -1,[1],  0,[1]],  <-- y * (d/(d+z))
    [{x:[0,[2]], y:[0,[3]]}]   <-- { x: x*(d/(d+z)), y: y*(d/(d+z)) }
  ]
}

ExampleCallToFunc: {
  parent: values: [Func],  <-- Lookups:  1,[..] (Func is 1,[0])
  args  : [ ],             <-- Lookups: -1,[..] (But its empty)
  values: [                <-- Lookups:  0,[..]
    3,                                    <-- x = 3
    2,                                    <-- y = 2
    1,                                    <-- z = 1
    9,                                    <-- d = 9
    [1,[0], 0,[0], 0,[1], 0,[2], 0,[3] ]  <-- Func(3,2,1,9)
  ]
}