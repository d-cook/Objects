eval(expr, env)
:: ([x, y..], {..})           --> call(lookup(eval(x, env)), [y..], env)
:: (_       , _   )           --> expr

lookup(key, env)
:: ("x", {x, ..}     )        --> x
:: ("x", {parent, ..})        --> lookup("x", parent)
:: (_  , _           )        --> null

call(func, args, env)
:: ({body:native, ..}, _, _)  --> apply: native(getArgs(func, args, env), env)
:: ({body, ..}       , _, _)  --> eval(body, newEnv(func, getArgs(func, args, env), env))
:: (native           , _, _)  --> apply: native(getArgs(func, args, env), env)
:: (_                , _, _)  --> null

getArgs(func, args, env)
:: ({syntax}, [x..], _)       --> [x..]
:: (_       , [x..], _)       --> [eval(x, env)..]

newEnv(func, args env)
:: ({args:["a"..]}, [x..], _) --> {parent:env, args, a:x..}
:: (_                    , _) --> {parent:env, args}
