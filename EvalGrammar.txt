eval(env, expr)
:: ([string, x..], _)       --> apply(lookup(env, string), [eval(env, x)..], env)
:: ([number, x..], _)       --> apply(lookup(env, number), [eval(env, x)..], env)
:: ([v     , x..], _)       --> apply(eval  (env, v     ), [eval(env, x)..], env)
:: (_            , _)       --> expr

lookup(env, key)
:: ({x     }, "x")          --> x
:: ({parent}, "x")          --> lookup(parent, "x")
:: (_       , _  )          --> null

apply(func, args, env)
:: (native       , _, _)    --> native(args)
:: ({code:native}, _, _)    --> code(newEnv(func, args, env, <caller_of_apply>))
:: ({code       }, _, _)    --> eval(newEnv(func, args, env, <caller_of_apply>), code)
:: (_            , _, _)    --> null

newEnv(func, args, env, cc)
:: ({parent}, _, _, _)      --> setArgs(func, args, {
                                  thisFunc: func,
                                  parent  : func.parent,
                                  caller  : env,
                                  return  : (function that re-routes execution into cc),
                                  scope   : (this entire outer object),
                                  args    : args
                                })
:: (_       , _, _, _)      --> setArgs(func, args, {parent:env, scope:(this), args:args})

setArgs(func, params, obj)
:: ({args:["a"..]}, [x..], {p..}) --> {a:x.., p..}
:: (_             , _    , _    ) --> obj