(work-in-progress)

eval(expr, env)
:: ([x,y..], {..}) --> call(lookup(eval(x, env)), [y..], env)
:: (..           ) --> expr

lookup(key, env)
:: ("x",{x}     ) --> x
:: ("x",{parent}) --> lookup("x", parent)
:: (x  , _      ) --> null

call(expr, args, env)
:: ({body}              ,[y..], _) --> eval(body, {parent:env, args:[eval(y,env)..]})
:: ({body, args:["a"..]},[y..], _) --> eval(body, {parent:env, args:[eval(y,env)..], a:eval(y,env)..})
:: ({body, syntax}      ,[y..], _) --> eval(body, {parent:env, args:[y..])
:: (func                ,[y..], _) --> func(eval(y,env)..)
:: (..                           ) --> null // "x" is not in env

getArgs(func, args, env)
:: ({syntax}, [x..], _  ) --> [x..]
:: (_       , [x..], env) --> [eval(x, env)..]
