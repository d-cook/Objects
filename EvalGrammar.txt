eval(expr, env)
:: ([string, x..], _)          --> apply(lookup(string, env), [eval(x, env)..], env)
:: ([number, x..], _)          --> apply(lookup(number, env), [eval(x, env)..], env)
:: ([v     , x..], _)          --> apply(eval(v, env)       , [eval(x, env)..], env)
:: (_            , _)          --> expr

lookup(key, env)
:: ("x", {x     })             --> x
:: ("x", {parent})             --> lookup("x", parent)
:: (_  , _       )             --> null

apply(func, args, env)
:: (native       , _, _)       --> native(args)
:: ({body:native}, _, _)       --> native(    newEnv(func, args, env))
:: ({body       }, _, _)       --> eval(body, newEnv(func, args, env))
:: (_            , _, _)       --> null

newEnv(func, params, env)
:: ({args:["a"..]}, [x..], _)  --> {parent:func.scope, caller:env, args:params, a:x..}
:: (_             , _    , _)  --> {parent:func.scope, caller:env, args:params}
