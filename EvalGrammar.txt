eval(expr, env)
:: ([string, ..], _)       --> call(lookup(string, env), [..], env)
:: ([number, ..], _)       --> call(lookup(number, env), [..], env)
:: ([x     , ..], _)       --> call(eval(x, env)       , [..], env)
:: (_           , _)       --> expr

lookup(key, env)
:: ("x", {x}     )             --> x
:: ("x", {parent})             --> lookup("x", parent)
:: (_  , _       )             --> null

call(func, args, env)
:: (_, [x..], _)               --> apply(func, [eval(x, env)..], env)

apply(func, args, env)
:: (native       , _, _)       --> native(args)
:: ({body:native}, _, _)       --> native(    newEnv(func, args, env))
:: ({body}       , _, _)       --> eval(body, newEnv(func, args, env))
:: (_            , _, _)       --> null

newEnv(func, params, env)
:: ({args:["a"..]}, [x..], _)  --> {parent:getScope(func), caller:env, args:params, a:x..}
:: (_             , _    , _)  --> {parent:getScope(func), caller:env, args:params}

getScope(func)
:: ({scope})                   --> scope
:: (_      )                   --> null