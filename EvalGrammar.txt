(work-in-progress)

eval(expr, env)
:: ([x,y..], {..}) --> call(lookup(eval(x, env)), [y..], env)
:: (..           ) --> expr

lookup(key, env)
:: ("x", {x}     ) --> x
:: ("x", {parent}) --> lookup("x", parent)
:: (x  , ..      ) --> null

call(func, args, env)
:: ({body:native}, ..) --> native.apply(null, getArgs(func, args, env))
:: ({body}       , ..) --> eval(body, newEnv(getArgs(func, args, env)))
:: (native       , ..) --> native.apply(null, args)
:: (..               ) --> null

getArgs(func, args, env)
:: ({syntax}, [x..], ..) --> [x..]
:: (_       , [x..], ..) --> [eval(x, env)..]

newEnv(func, args env)
:: ({args:["a"..]}, [x..], _) --> {parent:env, args, a:x..}
:: (..                      ) --> {parent:env, args}
